https://docs.microsoft.com/nb-no/learn/paths/az-104-administrator-prerequisites/

AZ-104: Prerequisites for Azure administrators
TODO 3h
Configure Azure resources with tools
Use Azure Resource Manager
Explore the Azure Resource Manager template parameters

In the parameters section of the template, you specify which values you can input when deploying the resources. The available properties for a parameter are:
"parameters": 
    { "<parameter-name>" :
        { "type" : "<type-of-parameter-value>",
         "defaultValue": "<default-value-of-parameter>",
          "allowedValues": [ "<array-of-allowed-values>" ], 
           "minValue": <minimum-value-for-int>,
           "maxValue": <maximum-value-for-int>,
            "minLength": <minimum-length-for-string-or-array>, 
            "maxLength": <maximum-length-for-string-or-array-parameters>,
             "metadata": { "description": "<description-of-the parameter>" } } }


Windows
Azure Az PowerShell module
Linux
On Linux, the package manager will change based on the Linux distribution you choose.
LINUX
Distribution(s)	Package manager
Ubuntu, Debian	apt-get
Red Hat, CentOS	yum
OpenSUSE	zypper
Fedora	dnf
Mac
On macOS, you will use Homebrew to install PowerShell.

Powershell cmdlets
* to get help on the Get-ChildItem cmdlet, enter the following statement in a Windows PowerShell session:
Get-Help -Name Get-ChildItem -Detailed
* You can get a list of loaded modules using the Get-Module command:
Get-Module

$PSVersionTable.PSVersion
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
# Take a coffee, this takes time, answer Yx2 and wait, when done, close/open Powershell and verify module
# Minimum Powershell v is 5.1
Get-InstalledModule -Name Az

* Update a PowerShell module
Update-Module -Name Az

Connect AzAccount
* or
Connect AzAccount -TenantId The-tenant-id-we-copied-from-azure-ad

* iF Created multiple Azure subscriptions. You can configure Azure PowerShell to execute commands against a particular subscription.
Set-AzContext -Subscription '00000000-0000-0000-0000-000000000000'

* Get a list of all resource groups
Get-AzResourceGroup | Format-Table

* Create a resource group
New-AzResourceGroup -Name <name> -Location <location>

$rg = “testit2-rg”
Get-AzResource -ResourceGroupName $rg

* Create an Azure Virtual Machine
New-AzVm
       -ResourceGroupName <resource group name>
       -Name <machine name>
       -Credential <credentials object>
       -Location <location>
       -Image <image name>

* The AzVM suffix is specific to VM-based commands in PowerShell. There are several others you can use:
Command	Description
Remove-AzVM	      Deletes an Azure VM.
Start-AzVM	      Start a stopped VM.
Stop-AzVM	      Stop a running VM.
Restart-AzVM	  Restart a VM.
Update-AzVM	      Updates the configuration for a VM.

* The interesting thing is that now your VM is an object you can interact with
$ResourceGroupName = "ExerciseResources"
$vm = Get-AzVM  -Name MyVM -ResourceGroupName $ResourceGroupName
$vm.HardwareProfile.vmSize = "Standard_DS3_v2"

Update-AzVM -ResourceGroupName $ResourceGroupName  -VM $vm


Exercise - Create an Azure Resource using scripts in Azure PowerShell

Connect-AzAccount

* Create a Linux VM with Azure PowerShell
* Add the -OpenPorts parameter, and pass "22" as the port. This will let us SSH into the machine.

New-AzVm -ResourceGroupName learn-9a7c6d9b-5436-4341-9ac2-61a67345466e -Name "testvm-eus-01" -Credential (Get-Credential) -Location "East US" -Image UbuntuLTS -OpenPorts 22
Dhamapada, Dhamapada-eat-carrot-ls45

$vm = (Get-AzVM -Name "testvm-eus-01" -ResourceGroupName learn-9a7c6d9b-5436-4341-9ac2-61a67345466e)

* Query the value to dump out the information about the VM.
$vm
$vm.HardwareProfile
$vm.StorageProfile.OsDisk
$vm | Get-AzPublicIpAddress

ssh Dhamapada@111.11.11.1
exit

* Delete a VM
Stop-AzVM -Name $vm.Name -ResourceGroup $vm.ResourceGroupName
Get-AzResource -ResourceGroupName $vm.ResourceGroupName | Format-Table
Remove-AzVM -Name $vm.Name -ResourceGroup $vm.ResourceGroupName -Force -As-Job
Get-AzResource -ResourceGroupName $vm.ResourceGroupName | Format-Table

* Delete the network interface.
$vm | Remove-AzNetworkInterface –Force

Delete the managed OS disks and storage account.
Get-AzDisk -ResourceGroupName $vm.ResourceGroupName -DiskName $vm.StorageProfile.OSDisk.Name | Remove-AzDisk -Force

* Next, delete the virtual network.
Get-AzVirtualNetwork -ResourceGroup $vm.ResourceGroupName | Remove-AzVirtualNetwork -Force

* Delete the network security group.
Get-AzNetworkSecurityGroup -ResourceGroup $vm.ResourceGroupName | Remove-AzNetworkSecurityGroup -Force

* And finally, delete the public IP address.
Get-AzPublicIpAddress -ResourceGroup $vm.ResourceGroupName | Remove-AzPublicIpAddress -Force


Exercise - Create and save scripts in Azure PowerShell

cd $HOME\clouddrive
touch "./ConferenceDailyReset.ps1"
code "./ConferenceDailyReset.ps1" # Integrated editor azure portal
* Start by capturing the input parameter in a variable. Add the following line to your script.
param([string]$resourceGroup)
* Prompt for a username and password for the VM's admin account and capture the result in a variable.

param([string]$resourceGroup)
$adminCredential = Get-Credential -Message "Enter a username and password for the VM administrator."
For ($i = 1; $i -le 3; $i++) 
{
    $vmName = "ConferenceDemo" + $i
    Write-Host "Creating VM: " $vmName
    New-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Credential $adminCredential -Image UbuntuLTS
}

Get-AzResource -ResourceType Microsoft.Compute/virtualMachines

Clean up
* The sandbox automatically cleans up your resources when you're finished with this module.
Remove-AzResourceGroup -Name MyResourceGroupName

Control Azure services with the CLI

As part of the testing, you want to compare app performance for different data sources, 
and for different types of data connections. You've noticed that when your development team uses the Azure portal to create a new test instance of the app, 
they don't always use exactly the same parameters. 
You plan to solve this problem by using a set of standard deployment commands for each app test, which can be automated if required, 
and which will work in the same way across all the computers used by your software team.

Azure CLI
variable="value"
variable=integer

PowerShell
$variable="value"
$variable=integer

az --version

$ az find
the following arguments are required: <CLI_TERM>

TRY THIS:
az find "az storage"
Give me any Azure CLI group and I’ll show the most popular commands within the group.

az find "az monitor activity-log list"
Give me any Azure CLI command and I’ll show the most popular parameters and subcommands.

az find "arm template"
You can also enter a search term, and I'll try to help find the best commands.

https://aka.ms/cli_ref
Read more about the command in reference docs

* Connect
az login
* Create
az group create --name <name> --location <location>
* Verify
az group list
az group list --output table

Exercise - Create an Azure website using the CLI
* let's use the Azure CLI to create a resource group, and then to deploy a web app into this resource group.

* create several variables that you will use in later commands
export RESOURCE_GROUP=learn-92e86fb8-eec3-486f-9306-f729f468c5ad
export AZURE_REGION=centralus
export AZURE_APP_PLAN=popupappplan-$RANDOM
export AZURE_WEB_APP=popupwebapp-$RANDOM

az group list --output table

* If you have several items in the group list, you can filter the return values by adding a --query option. Try the following command:
az group list --query "[?name == '$RESOURCE_GROUP']"

* Steps to create a service plan
* Create an App Service plan to run your app. The following command specifies the free pricing tier, but you can run az appservice plan create --help to see the other pricing tiers.
az appservice plan create --name $AZURE_APP_PLAN --resource-group $RESOURCE_GROUP --location $AZURE_REGION --sku FREE

* Verify that the service plan was created successfully by listing all your plans in a table.
az appservice plan list --output table

* Steps to create a web app
az webapp create --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --plan $AZURE_APP_PLAN

* Verify that the app was created successfully by listing all your apps in a table.
az webapp list --output table

Name               Location    State    ResourceGroup                               DefaultHostName    AppServicePlan
-----------------  ----------  -------  ------------------------------------------  -----------------------------------  ------------------
popupwebapp-15123  Central US  Running  learn-92e86fb8-eec3-486f-9306-f729f468c5ad  popupwebapp-15123.azurewebsites.net  popupappplan-12763

* then my website URL would be: http://popupwebapp-15123.azurewebsites.net
* or curl curl $AZURE_WEB_APP.azurewebsites.net

Steps to deploy code from GitHub
* Let's use a simple PHP page available in the Azure Samples GitHub repository that displays "Hello World!" when it executes. Make sure to use the web app name you created.
az webapp deployment source config --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --repo-url "https://github.com/Azure-Samples/php-docs-hello-world" --branch master --manual-integration

* Result
{
  "branch": "master",
  "deploymentRollbackEnabled": false,
  "id": "/subscriptions/538be7b9-15c9-4be0-a2ee-8d948e33ad6a/resourceGroups/learn-92e86fb8-eec3-486f-9306-f729f468c5ad/providers/Microsoft.Web/sites/popupwebapp-15123/sourcecontrols/web",
  "isGitHubAction": false,
  "isManualIntegration": true,
  "isMercurial": false,
  "kind": null,
  "location": "Central US",
  "name": "popupwebapp-15123",
  "repoUrl": "https://github.com/Azure-Samples/php-docs-hello-world",
  "resourceGroup": "learn-92e86fb8-eec3-486f-9306-f729f468c5ad",
  "systemData": null,
  "type": "Microsoft.Web/sites/sourcecontrols"
}

http://popupwebapp-15123.azurewebsites.net/

* Now gives Hello World

*Remove the rg

RG_GROUP="learn-92e86fb8-eec3-486f-9306-f729f468c5ad"
echo "Name of rg; $RG_GROUP"

RG_EXISTS= az group exists --name $RG_GROUP
echo "Does rg exist; $RG_EXISTS"

RG_RESULT= az group delete --name $RG_GROUP --no-wait --yes -y #--subscription
echo $RG_RESULT

az group list --output table
Name                                        Location    Status
------------------------------------------  ----------  --------
learn-92e86fb8-eec3-486f-9306-f729f468c5ad  westus      Deleting

Deploy Azure infrastructure by using JSON ARM templates

Practice of infrastructure as code by using ARM templates. 
You can also integrate your ARM templates into continuous integration and continuous deployment (CI/CD) tools like Azure Pipelines, which can automate your release pipelines for fast and reliable application and infrastructure updates. By using Azure DevOps and ARM template tasks, you can continuously build and deploy your projects.

ARM template file structure

Element	Description
schema	        A required section that defines the location of the JSON schema file that describes the structure of JSON data. The version number you use depends on the scope of the deployment and your JSON editor.
contentVersion	A required section that defines the version of your template (such as 1.0.0.0). You can use this value to document significant changes in your template to ensure you're deploying the right template.
apiProfile	    An optional section that defines a collection of API versions for resource types. You can use this value to avoid having to specify API versions for each resource in the template.
parameters	    An optional section where you define values that are provided during deployment. These values can be provided by a parameter file, by command-line parameters, or in the Azure portal.
variables	    An optional section where you define values that are used to simplify template language expressions.
functions	    An optional section where you can define user-defined functions that are available within the template. User-defined functions can simplify your template when complicated expressions are used repeatedly in your template.
resources	    A required section that defines the actual items you want to deploy or update in a resource group or a subscription.
output	        An optional section where you specify the values that will be returned at the end of the deployment.

Deploy a local template.
Deploy a linked template.
Deploy in a continuous deployment pipeline.


Exercise - Create and deploy an Azure Resource Manager template

1 file called azuredeploy.json.
2 The Visual Studio Code ARM template extension comes configured with snippets to help you develop templates
3 The VS Code automatically displays several potential choices that start with arm!.

Your file now looks like this:

JSON

Copy
{
"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {},
"functions": [],
"variables": {},
"resources": [],
"outputs": {}
}

4 Connect-AzAccount
5 Get-AzSubscription
* Run the following command, replacing {Your subscription ID} with the one you copied in the previous step to change your active subscription to the Concierge Subscription.
6 $context = Get-AzSubscription -SubscriptionId {Your subscription ID}
  Set-AzContext $context

7 Deploy the template to Azure by running the following commands. The ARM template doesn't have any resources yet, so you won't see resources created.
$templateFile = "./azuredeploy.json"
$ran = Get-Random -Maximum 100
$deployName = "buildTest" + $ran + $ran
Write-Host "Running deploy: " $deployName
$deploymentName=$deployName
$rg = 'learn-af1fd9f8-de1d-4048-a20a-48904672560b'
New-AzResourceGroupDeployment -Name $deploymentName `
  -ResourceGroupName $rg `
  -TemplateFile $templateFile `


* When you've deployed your ARM template to Azure, go to the Azure portal and make sure you're in the sandbox subscription. To do that, select your avatar in the upper-right corner of the page. Select Switch directory. In the list, choose the Microsoft Learn Sandbox directory.

* In the azuredeploy.json file in Visual Studio Code, place your cursor inside the braces in the parameters attribute. "parameters":{},

* Select Enter, and then enter par. You see a list of related snippets. Choose arm-param. It adds a generic parameter to the template. It will look like this:

 "parameters": {
    "parameter1": {
    "type": "string",
    "metadata": {
        "description": "description"
    }
  }
},
* Change the parameter to be called storageName, and leave the type as a string. Add a minLength value of 3 and a maxLength value of 24. Add a description value of The name of the Azure storage resource.
"parameters": {
        "storageName": {
            "type": "string",
            "minLength":3,
            "maxLength":24,
            "metadata": {
                "description": "description"
            }
        }
    },

* Use the new parameter in the resources block in both the name and displayName values. The entire file will look like this:
"resources": [{
        "name": "[parameters('storageName')]",
 "tags": {
            "displayName": "[parameters('storageName')]"
        },

Add another parameter to limit allowed values
* Place your cursor after the closing brace for the storageNameparameter. Add a comma, and select Enter.
* Again, enter par, and select arm-param.
* ARM templates support // and /* */ comments.


Allow this deployment to finish. This deployment succeeds as expected


Run the following commands to deploy the template with a parameter that isn't allowed. Here, you changed the storageSKU parameter to Basic.

$templateFile = "./azuredeploy.json"
$ran = Get-Random -Maximum 100
$deployName = "buildTest" + $ran + $ran
Write-Host "Running deploy: " $deployName
$deploymentName=$deployName
$rg = 'learn-af1fd9f8-de1d-4048-a20a-48904672560b'
New-AzResourceGroupDeployment -Name $deploymentName `
  -ResourceGroupName $rg `
  -TemplateFile $templateFile `
  -storageName "espenklei12" `
  -storageSKU "Standard_LRS" -Verbose

This deployment fails. Notice the error.

Add output to the ARM template

"outputs": {
        "storageEndpoint": {
            "type": "object",
            "value": "[reference(parameters('storageName')).primaryEndpoints]"
        }
    }
    
And change
 -storageSKU "Basic" -Verbose
 -storageSKU "Standard_LRS" -Verbose


AZ-104: Manage identities and governance in Azure

Configure Azure Active Directory
* Single sign-on to any cloud or on-premises web app
* Works with iOS, macOS, Android, and Windows devices
* Protect on-premises web applications with secure remote access
* Easily extend Active Directory to the cloud
* Protect sensitive data and applications
* Reduce costs and enhance security with self-service capabilities

Describe Azure Active Directory concepts
* Identity, object that get autenticated
* Account, an identity that has data associated with it
* Azure AD Account, an identity created thorugh Azure AD or other MS cloud services, (work or school account)
* Azure Subscription, useds to pay for cloud services 
* Azure tenant/directory, a dedicated/trusted instance of Azure AD

Compare Active Directory Domain Services to Azure Active Directory
* AD DS is the traditional deployment of Windows Server-based Active Directory on a physical or virtual server.
* Although Azure AD has many similarities to AD DS, there are also many differences. 
* It is important to realize that using Azure AD is different from deploying an Active Directory domain controller on an Azure virtual machine and adding it to your on-premises domain. 
* Here are some characteristics of Azure AD that make it different.

** Identity solution. Azure AD is primarily an identity solution, and it is designed for Internet-based applications by using HTTP and HTTPS communications.
** REST API Querying. Because Azure AD is HTTP/HTTPS based, it cannot be queried through LDAP
** Communication Protocols. Because Azure AD is HTTP/HTTPS based, it does not use Kerberos authentication. 
*** Instead, it uses HTTP and HTTPS protocols such as SAML, WS-Federation, and OpenID Connect for authentication (and OAuth for authorization).
** Federation Services. Azure AD includes federation services, and many third-party services (such as Facebook).
** Flat structure. Azure AD users and groups are created in a flat structure, and there are no Organizational Units (OUs) or Group Policy Objects (GPOs).

Select Azure Active Directory editions
* Azure Active Directory comes in four editions—Free, Microsoft 365 Apps, Premium P1, and Premium P2
1 Azure Active Directory Free. Provides user and group management, on-premises directory synchronization, basic reports, 
  and single sign-on across Azure, Microsoft 365, and many popular SaaS apps.
2 Azure Active Directory Microsoft 365 Apps. This edition is included with O365. In addition to the Free features, this edition provides Identity & Access Management for Microsoft 365 apps including branding, 
  MFA, group access management, and self-service password reset for cloud users.
3 Azure Active Directory Premium P1. In addition to the Free features, P1 also lets your hybrid users access both on-premises and cloud resources. 
  Support for adv. administration, dynamic groups, self service management groups, identity manager (on-prem idenetiy and access management suite), cloud-
  write-back, self service password reset
4 Azure Active Directory Premium P2. In addition to the Free and P1 features, P2 also offers Azure Active Directory Identity Protection to help provide risk-based Conditional Access to your apps and critical company data. 

Implement Azure Active Directory join
* Azure Active Directory (Azure AD) enables single sign-on to devices, apps, and services from anywhere. 
  IT administrators must ensure corporate assets are protected and that devices meet standards for security and compliance.

** Single-Sign-On (SSO) to your Azure-managed SaaS apps and services. 
** Enterprise compliant roaming of user settings across joined devices. 
** Access to Microsoft Store for Business using an Azure AD account
** Windows Hello support for secure and convenient access to work resources.
** Restriction of access to apps from only devices that meet compliance policy
** Seamless access to on-premise resources when the device has line of sight to the on-premises domain controller.

Connection options
* Registering a device to Azure AD enables you to manage a device’s identity,can use the identity to enable or disable a device.
* Joining a device is an extension to registering a device. Joining provides the benefits of registering and changes the local state of a device. 

NOTE: Registration combined with a mobile device management (MDM) solution such as Microsoft Intune, provides additional device attributes in Azure AD. You can create conditional access rules that enforce access from devices to meet your standards for security and compliance.

Implement self-service password reset
* Enabling Self-service Password Reset (SSPR) gives the users the ability to bypass the helpdesk and reset their own passwords.
* To configure Self-Service Password Reset, you first determine who will be enabled to use self-service password reset. 
  From your existing Azure AD tenant, on the Azure portal under Azure Active Directory (Users) select Password reset.
  In the Password reset properties there are three options: None, Selected, and All.
* The Selected option is useful for creating specific groups who have self-service password reset enabled. 
  You can create group for testing or proof of concept before deploying to a larger group.

Authentication methods
* At least one authentication method is required to reset a password. It is a good idea to have other methods available.
* email notification, a text, or code sent to user’s mobile or office phone, or a set of security questions.
* can also configure how many correctly answered security questions are required for a successful password reset

Configure user and group accounts

Create user accounts
Azure Active Directory-> Users

Typically, Azure AD defines users in three ways:
* Cloud identities. These users exist only in Azure AD
* Directory-synchronized identities. These users exist in an on-premises Active Directory. 
  A synchronization activity that occurs via Azure AD Connect brings these users in to Azure. Their source is Windows Server AD.
* Guest users. These users exist outside Azure. Examples are accounts from other cloud providers and Microsoft accounts such as an Xbox LIVE account. Their source is Invited user.

Manage user accounts
* New or guest 

Create bulk user accounts
* Azure Active Directory (Azure AD) supports bulk user create and delete operations and supports downloading lists of users. Just fill out the comma-separated values (CSV) template. 
  You can download the template from the Azure AD portal. To create users in the Azure portal, you must be signed in as a Global administrator or User administrator.
* Users | All users-> Bulk operations

Things to consider when using the template
* Naming conventions, First.last@domain.com
* Methods commonly used include generating a random password and emailing it to the new user or their manager.

Create group accounts

Azure AD allows you to define two different types of groups.
*  Security groups. Security groups are used to manage member and computer access to shared resources for a group of users.
* Microsoft 365 groups. Microsoft 365 groups provide collaboration opportunities by giving members access to a shared mailbox, calendar, files, SharePoint site, and more. 
  You can give people outside of your organization access to the group. Both users and admins can use Microsoft 365 groups.

Adding members to groups
* Assigned. Lets you add specific users to be members of this group and to have unique permissions.
* Dynamic User. Lets you use dynamic membership rules to automatically add and remove members. 
  When a member's attributes change, Azure reviews the dynamic group rules for the directory. 
  If the member meets the rule requirements, they're added. If the member no longer meets the rules requirements, they're removed.
* Dynamic Device (Security groups only). Lets you use dynamic group rules to automatically add and remove devices. If a device's attributes change (same as above (add, rm))

Create administrative units
* It can be useful to restrict administrative scope by using administrative units in organizations that are made up of independent divisions of any kind.

Configure subscriptions

Identify regions
* A region is a geographical area on the planet containing at least one, but potentially multiple datacenters. 

Implement Azure subscriptions
* An Azure subscription is a logical unit of Azure services that is linked to an Azure account. Billing for Azure services is done on a per-subscription basis. 
* Each subscription can have a different billing and payment setup, so you can have different subscriptions and different plans by department, project, regional office, and so on.
* Subscriptions have accounts. An Azure account is simply an identity in Azure Active Directory (Azure AD) or in a directory that is trusted by Azure AD, such as a work or school organization. 
* Every Azure subscription is associated with an Azure Active Directory

Identify subscription usage
* Free
* Pay-As-You-Go
* Enterprise Agreement
* Student

Implement cost management
* With Azure products and services, you only pay for what you use.

Plan and control expenses
* Cost analysis, budget, recommendations, exporting cost management data

Apply resource tagging
* apply the name Environment and the value Production or Development to your resources and more

Apply cost savings
* Reservations help you save money by paying ahead. You can pay for one-year or three-years of virtual machine, SQL Database compute capacity, Azure Cosmos DB throughput, or other Azure resources. 
  Pre-paying allows you to get a discount on the resources you use.
* Azure Hybrid Benefits is a pricing benefit for customers who have licenses with Software Assurance. Azure Hybrid Benefits helps maximize the value of existing on-premises Windows Server or SQL Server license investments when migrating to Azure.
* Azure Credits is monthly credit benefit that allows you to experiment with
* Azure regions pricing can vary from one region to another
* Budgets help you plan for and drive organizational accountability limit = alert
* Pricing Calculator

Configure Azure policy

If your organization has several subscriptions, you may need a way to efficiently manage access, policies, and compliance for those subscriptions. 
Azure management groups provide a level of scope above subscriptions. 
You organize subscriptions into containers called management groups and apply your governance conditions to the management groups. Management group enable:

* Organizational alignment for your Azure subscriptions through custom hierarchies and grouping.
* Targeting of policies and spend budgets across subscriptions and inheritance down the hierarchies.
* Compliance and cost reporting by organization (business/teams).

* All subscriptions within a management group automatically inherit the conditions applied to the management group. 
  For example, you can apply policies to a management group that limits the regions available for virtual machine (VM) creation.

Adding management groups
* The Management Group ID is the directory unique identifier that is used to submit commands on this management group.
* The Display Name field is the name that is displayed within the Azure portal

Implement Azure policies
Azure Policy is a service in Azure that you use to create, assign, and manage policies. 
* Enforcement and compliance. Turn on built-in policies or build custom ones for all resource types. 
* Apply policies at scale. Apply policies to a Management Group with control across your entire organization.
* Remediation. Real-time remediation

Azure Policy will be important to you if your team runs an environment where you need to govern:
* Multiple engineering teams (deploying to and operating in the environment)
* Multiple subscriptions
* Need to standardize/enforce how cloud resources are configured
* Manage regulatory compliance, cost control, security, or design consistency

Use cases
* Specify the resource types that your organization can deploy.
* Specify a set of virtual machine SKUs that your organization can deploy.
* Restrict the locations your organization can specify when deploying resources.
* Enforce a required tag and its value.
* Audit if Azure Backup service is enabled for all Virtual machines.

Create Azure policies

1 Browse Policy Definitions. A Policy Definition expresses what to evaluate and what actions to take. Every policy definition has conditions under which it is enforced. 
  And, it has an accompanying effect that takes place if the conditions are met. 
  For example, you could prevent VMs from being deployed if they are exposed to a public IP address.
2 Create Initiative Definitions. 
  An initiative definition is a set of Policy Definitions to help track your compliance state for a larger goal. 
  For example, ensuring a branch office is compliant.
3 Scope the Initiative Definition. You can limit the scope of the Initiative Definition to Management Groups, Subscriptions, or Resource Groups.
4 View Policy Evaluation results

NOTE: Even if you have only a few Policy Definitions, we recommend creating an Initiative Definition.

Create policy definitions
* There are many Built-in Policy Definitions for you to choose from. Sorting by Category will help you locate what you need.
  For example,
  The Allowed Virtual Machine SKUs enables you to specify a set of virtual machine SKUs that your organization can deploy.
  The Allowed Locations policy enables you to restrict the locations that your organization can specify when deploying resources. 
  The Allowed Locations policy can be used to enforce your geo-compliance requirements.

* When there isn't an applicable policy you can add a new Policy Definition. You can import a policy definitions from GitHub. New Policy Definitions are added almost every day.

Create initiative definitions
* Once you have determined which Policy Definitions you need, you create an Initiative Definition. This definition will include one or more policies. 

Scope the initiative definition
* Once our Initiative Definition is created, you can assign the definition to establish its scope. 
  A scope determines what resources or grouping of resources the policy assignment gets enforced on.
* You can select the Subscription, and then optionally a Resource Group.

Determine compliance
* Once your policy is in place, you can use the Compliance blade to review non-compliant initiatives, non-compliant policies, and non-compliant resources.


Configure role-based access control
* Securing your Azure resources, such as virtual machines, websites, networks, and storage, is a critical function for any organization using the cloud.

Implement role-based access control
* Azure RBAC is an authorization system built on Azure Resource Manager that provides fine-grained access management of resources in Azure.

Here are some examples of what you can do with Azure RBAC:
* Allow an application to access all resources in a resource group
* Allow one user to manage virtual machines in a subscription and another user to manage virtual networks
* Allow a DBA group to manage SQL databases in a subscription
* Allow a user to manage all resources in a resource group, such as virtual machines, websites, and subnets

Concepts
* Service principal, object, user, group
* Role definition, permissions
* Scope, boundary of level: management groups, subscription, resource groups, resource
* Assignment, Attaching a role definition to a service principal at a particular scope

Create a role definition
* Each role is a set of properties defined in a JSON file.
* This role definition includes Name, Id, and Description. 
  The definition also includes the allowable permissions (Actions), 
  denied permissions (NotActions), and scope (read access, etc.) for the role.

Actions and NotActions
* The Actions and NotActions properties can be tailored to grant and deny the exact permissions you need. 
  This table defines how the Owner, Contributor, and Reader roles.

Built-in Role                 Action                           NotAction
Owner(allow all actions)      *                                  

Contributor(alow all actions  *                                Microsoft.Authorization/*/Delete,
except writing/Deleting                                        Microsoft.Authorization/*/Write,
role assignment)                                               Microsoft.Authorization/elevateAccess/Action

Reader(allow all actions)     */read


Scope your role
* After defining the Actions and NotActions properties, you must scope the role.
  The AssignableScopes property of the role specifies the role scope. The scope can be subscriptions. resource groups, or resources.


* /subscriptions/[subscription id]
* /subscriptions/[subscription id]/resourceGroups/[resource group name]
* /subscriptions/[subscription id]/resourceGroups/[resource group name]/[resource]

Create a role assignment
* A role assignment is the process of scoping a role definition to a user, group, service principal, or managed identity. The purpose of the role assignment is to grant access. Access is revoked by removing a role assignment.

NOTE: A resource inherits role assignments from its parent resource.

Compare Azure roles to Azure Active Directory roles

* Classic subscription administrator roles
* Azure role-based access control (RBAC) roles
* Azure Active Directory (Azure AD) administrator roles

* To better understand roles in Azure, it helps to know some of the history. When Azure was initially released, access to resources was managed with 
  just three administrator roles: Account Administrator, Service Administrator, and Co-Administrator. 
  Later, role-based access control (RBAC) for Azure resources was added. 
  Azure RBAC is a newer authorization system that provides fine-grained access management to Azure resources. 
  RBAC includes many built-in roles, can be assigned at different scopes, and allows you to create your own custom roles. 
  To manage resources in Azure AD, such as users, groups, and domains, there are several Azure AD administrator roles.

Azure RBAC roles                                    Azure AD roles

* Manage access to Azure resources.                 * Manage access to Azure Active Directory resources.

* Scope can be specified at multiple levels         * Scope is at the tenant level.
 (management group, subscription, 
  resource group, resource).

* Role information can be accessed in               * Role information can be accessed in Azure admin portal,
  Azure portal, Azure CLI, Azure PowerShell,          Microsoft 365 admin portal, Microsoft Graph AzureAD
  Azure Resource Manager templates, REST API.         PowerShell.


Apply role-based access control

* RBAC includes many built-in roles, can be assigned at different scopes, and allows you to create your own custom roles. 
  To manage resources in Azure AD, such as users, groups, and domains, there are several Azure AD administrator roles.
* Azure AD Admin roles are used to manage resources in Azure AD, such as users, groups, and domains.
* Azure RBAC roles provide more fine-grained access management to Azure resources.


Determine role-based access control roles

Azure includes several built-in roles that you can use. There are four fundamental built-in roles. The first three apply to all resource types.
* Owner. Has full access to all resources including the right to delegate access to others.
* Contributor. Can create and manage all types of Azure resources but can’t grant access to others.
* Reader. Can view existing Azure resources.
* User Access Administrator. Lets you manage user access to Azure resources, rather than to managing resources.

NOTE: 
* There are other built-in roles. For example, the Virtual Machine Contributor role allows a user to create and manage virtual machines.
* When the built-in roles don't meet the specific needs of your organization, you can create your own custom roles.
* Roles can grant access to data within an object. 
  For example, if a user has read data access to a storage account, then they can read the blobs or messages in the storage account.


Create Azure users and groups in Azure Active Directory

What are user accounts in Azure Active Directory?
* All user accounts are granted a set of default permissions. 
  A user's account access consists of the type of user, their role assignments, and their ownership of individual objects.
* Permissions and roles, Administrator roles (all + crud users), Memeber users (can be all - crud user), Guest users (restricted)


Add user accounts AZ(PS1)
# create a new user
New-AzureADUser

# You can bulk create member users and guests accounts. The following example shows how to bulk invite guest users.
$invitations = import-csv c:\bulkinvite\invitations.csv

$messageInfo = New-Object Microsoft.Open.MSGraph.Model.InvitedUserMessageInfo

$messageInfo.customizedMessageBody = "Hello. You are invited to the Contoso organization."

foreach ($email in $invitations)
   {New-AzureADMSInvitation `
      -InvitedUserEmailAddress $email.InvitedUserEmailAddress `
      -InvitedUserDisplayName $email.Name `
      -InviteRedirectUrl https://myapps.microsoft.com `
      -InvitedUserMessageInfo $messageInfo `
      -SendInvitationMessage $true
   }
# You create the comma-separated values (CSV) file with the list of all the users you want to add. An invitation is sent to each user in that CSV file.

# Delete user accounts
Remove-AzureADUser

Exercise - Add and delete users in Azure Active Directory


Manage app and resource access by using Azure Active Directory groups
* You want to give the developers within your organization the same access. You also want to manage who is part of the developers' group and who isn't.
* Azure Active Directory (Azure AD) helps you to manage your cloud-based apps, on-premises apps, and resources by using your organization's groups. 

Access management in Azure AD
* Azure AD roles: Use Azure AD roles to manage Azure AD-related resources like users, groups, billing, licensing, application registration, and more.
* Role-based access control (RBAC) for Azure resources: 
  Use RBAC roles to manage access to Azure resources like virtual machines, SQL databases, or storage.

Access rights through single user or group assignment
* Azure AD helps you provide access rights to a single user or to an entire group of users.

There are different ways you can assign access rights:
* Direct assignment: Assign a user the required access rights by directly assigning a role that has those access rights.
* Group assignment: Assign a group the required access rights, and members of the group will inherit those rights.
* Rule-based assignment: Use rules to determine a group membership based on user or device properties. 
  For a user account or device's group membership to be valid, the user or device must meet the rules.


Exercise - Assign users to Azure Active Directory groups


Collaborate by using guest accounts and Azure Active Directory B2B
* You want the external team to collaborate with the internal developer team in a process that's easy and secure. With Azure Active Directory 
  (Azure AD) business to business (B2B), you can add people from other companies to your Azure AD tenant as guest users.

* In any scenario where external users need temporary or restricted access to your organization's resources, give them guest user access. 
  You can grant guest user access with the appropriate restrictions in place. Then remove access when the work is done.

Collaborate with any partner by using their identities
* With Azure Active Directory B2B, you don't have to manage your external users' identities. The partner has the responsibility to manage its own identities. 
  External users continue to use their current identities to collaborate with your organization.

* Her organization manages her identity as gcarvalho@proseware.com. 
  You use that identity for the guest account in your organization's Azure AD. After Giovanna redeems the guest account invitation, 
  she uses the same identity (name and password) for the guest account as she does for her organization.


Why use Azure AD B2B instead of federation?
* With Azure AD B2B, you don't take on the responsibility of managing and authenticating the credentials and identities of partners.
* Giving access to external users is much easier than in a federation. 
  You don't need an AD administrator to create and manage external user accounts. 
  Any authorized user can invite other users. A line manager could, for example, 
  invite external users to collaborate with their team. When collaboration is no longer needed, these external users can easily be removed.

* A federation is more complex. A federation is where you have a trust established with another organization, 
  or a collection of domains, for shared access to a set of resources. 
  You might be using an on-premises identity provider and authorization service like Active Directory 
  Federation Services (AD FS) that has an established trust with Azure AD.


Exercise - Give guest users access in Azure Active Directory B2B


Secure your Azure resources with Azure role-based access control (Azure RBAC)
* Learn how to use Azure RBAC to manage access to resources in Azure.
* Securing your Azure resources, such as virtual machines, websites, networks, and storage, 
  is a critical function for any organization using the cloud. 
  You want to ensure that your data and assets are protected, 
  but still grant your employees and partners the access they need to perform their jobs. 
  Azure role-based access control (Azure RBAC) is an authorization system in Azure that helps you manage who has access to Azure resources, 
  what they can do with those resources, and where they have access.


What is Azure RBAC?
* Ensuring that when people leave the organization, they lose access to resources in the cloud.
* Striking the right balance between autonomy and central governance - for example, giving project teams the ability to create and manage virtual machines in the cloud 
  while centrally controlling the networks those VMs use to communicate with other resources.

* Azure Active Directory (Azure AD) and Azure role-based access control (Azure RBAC) 
  work together to make it simple to carry out these goals.

Azure subscriptions
* First, remember that each Azure subscription is associated with a single Azure AD directory. 
  Users, groups, and applications in that directory can manage resources in the Azure subscription.
* The subscriptions use Azure AD for single sign-on (SSO) and access management. 
  You can extend your on-premises Active Directory to the cloud by using Azure AD Connect.
* When you disable an on-premises Active Directory account, 
  it automatically loses access to all Azure subscriptions connected with Azure AD.  

* Azure role-based access control (Azure RBAC) is an authorization system built on Azure Resource Manager 
  that provides fine-grained access management of resources in Azure.


* Who (Service principal), what (Role defintion) and where (scope) ? = Role assignment

What can I do with Azure RBAC?
* Allow one user to manage virtual machines in a subscription and another user to manage virtual networks
* Allow a database administrator group to manage SQL databases in a subscription
* Allow a user to manage all resources in a resource group, such as virtual machines, websites, and subnets
* Allow an application to access all resources in a resource group

Azure RBAC in the Azure portal
* Access control (IAM), also known as identity and access management. 
  On this pane, you can see who has access to that area and their role. Using this same pane, you can grant or remove access.


How does Azure RBAC work?
* Security principal (who), user, group, or application 
* Role definition (what you can do), Roles can be high-level, like Owner, or specific, like Virtual Machine Contributor.
* Azure includes several built-in roles that you can use. The following lists four fundamental built-in roles:
** Owner - Has full access to all resources, including the right to delegate access to others.
** Contributor - Can create and manage all types of Azure resources, but can’t grant access to others.
** Reader - Can view existing Azure resources.
** User Access Administrator - Lets you manage user access to Azure resources.
** If the built-in roles don't meet the specific needs of your organization, you can create your own custom roles.
* Scope (where), Scope is where the access applies to
  In Azure, you can specify a scope at multiple levels: management group, subscription, resource group, or resource.

Role assignment
* Once you have determined the who, what, and where, you can combine those elements to grant access. 
  A role assignment is the process of binding a role to a security principal at a particular scope, for the purpose of granting access. 
  To grant access, you create a role assignment. To revoke access, you remove a role assignment.

Azure RBAC is an allow model. 
* What this means is that when you are assigned a role, Azure RBAC allows you to perform certain actions, such as read, write, or delete. 
* Azure RBAC has something called NotActions permissions. Use NotActions to create a set of not allowed permissions.


Exercise - List access using Azure RBAC and the Azure portal

Exercise - Grant access using Azure RBAC and the Azure portal

Exercise - View activity logs for Azure RBAC changes

Allow users to reset their password with Azure Active Directory self-service password reset

* Evaluate self-service password reset to allow users in your organization to reset their passwords or unlock their accounts. 
* Set up, configure, and test self-service password reset.

What is self-service password reset in Azure Active Directory?
* Reduce help-desk costs in your retail organization
* self-service password reset (SSPR) in Azure Active Directory (Azure AD)

How SSPR works
* The user initiates a password reset either by going directly to the password reset portal or by selecting 
  the Can't access your account link on a sign-in page. The reset portal takes these steps:
1 Localization: The portal checks the browser's locale setting and renders the SSPR page in the appropriate language.
2 Verification: The user enters their username and passes a captcha to ensure that it's a user and not a bot.
3 Authentication: The user enters the required data to authenticate their identity. They might, for example, enter a code or answer security questions.
4 Password reset: If the user passes the authentication tests, they can enter a new password and confirm it.
5 Notification: A message is usually sent to the user to confirm the reset.

Authenticate a password reset
* It's critical to verify the identity of a user before you allow a password reset. Malicious users might exploit any weakness in the system to impersonate that user. 
* Azure supports six different ways to authenticate reset requests.
Authentication method
* Mobile app notification
* Mobile app code
* Email
* Mobile phone
* Office phone
* Security questions

Require the minimum number of authentication methods
Recommendations
1 Enable two or more of the authentication reset request methods.
2 Use the mobile app notification or code as the primary method, but also enable the email or 
  office phone methods to support users without mobile devices.
3 The mobile phone method isn't a recommended method because it's possible to send fraudulent SMS messages.
4 The security question option is the least recommended method because the answers 
  to the security questions might be known to other people. Only use the security question 
  method in combination with at least one other method.

Accounts associated with administrator roles
1 A strong, two-method authentication policy is always applied to accounts with an administrator role, 
  regardless of your configuration for other users.
2 The security questions method isn't available to accounts that are associated with an administrator role.

Configure notifications
* Administrators can choose how users are notified of password changes. There are two options that you can enable:
** Notify users on password resets: The user who resets their own password is notified to their primary and secondary email addresses. 
   If the reset was done by a malicious user, this notification alerts the user, who can take mitigation steps.
** Notify all admins when other admins reset their password: All administrators are notified when another administrator resets their password.


License requirements
* The editions of Azure AD are free, Premium P1, and Premium P2. The password reset functionality you can use depends on your edition.
* Any user who is signed in can change their password, regardless of the edition of Azure AD.
* If you're not signed in and you've forgotten your password or your password has expired, 
  you can use SSPR in Azure AD Premium P1 or P2. It's also available with Microsoft 365 Apps for business or Microsoft 365.


Implement Azure AD self-service password reset

You've decided to implement self-service password reset (SSPR) in Azure Active Directory (Azure AD) for your organization. 
You want to start using SSPR for a group of 20 users in the marketing department as a trial deployment. 
If everything works well, you'll enable SSPR for your whole organization.

In this unit, you'll learn how to enable SSPR in Azure AD.

Prerequisites
Before you start to configure SSPR, you need these things in place:

1 An Azure AD organization. This organization must have at least a trial license enabled.
2 An Azure AD account with Global Administrator privileges. You'll use this account to set up SSPR.
3 A non-administrative user account. You'll use this account to test SSPR. It's important that this account isn't an administrator, because Azure AD imposes extra requirements on administrative accounts for SSPR. This user, and all user accounts, must have a valid license to use SSPR.
4 A security group to test the configuration with. The non-administrative user account must be a member of this group. You'll use this security group to limit who you roll SSPR out to.
(5) lab, but do not need: If you don't already have an Azure AD organization that you can use for this module, we'll set one up in the next unit.

Scope of SSPR rollout
There are three settings for the Self-service password reset enabled property:
1 Disabled: No users in the Azure AD organization can use SSPR. This value is the default.
2 Enabled: All users in the Azure AD organization can use SSPR.
3 Selected: Only the members of the specified security group can use SSPR.

Exercise - Set up self-service password reset

Exercise - Customize directory branding


AZ-104: Implement and manage storage in Azure

Configure storage accounts

Identify features and usage cases for Azure storage accounts.
Select between different types of storage and storage accounts.
Select a storage replication strategy.
Configure network access to storage accounts.
Secure storage endpoints.

Azure Storage offers:
* a massively scalable object store for data objects
* a file system service for the cloud
* a messaging store for reliable messaging
* and a NoSQL store. 

Azure Storage is:
* Durable and highly available, redundancy, replication across regions, geo
* Secure, all data written is encrypted and IAM, RBACK
* Scalable, designed to massiv scale for storage/performance
* Managed, MS handles HW maintain, update and critical issue for you
* Accessible, HTTP(S), SDK's .net, java, python etc, cli az and ps1

You can generally think of Azure storage in three categories:

* Storage for Virtual Machines, Virtual machine storage includes disks and files. 
  Disks are persistent block storage for Azure IaaS virtual machines. Files are fully managed file shares in the cloud.
* Unstructured Data, Unstructured data includes Blobs and Data Lake Store. 
  Blobs are highly scalable, REST-based cloud object store. Data Lake Store is Hadoop Distributed File System (HDFS) as a service.
* Structured Data. Structured data includes Tables, Cosmos DB, and Azure SQL DB. 
  Tables are a key/value, autoscaling NoSQL store. 
  Cosmos DB is a globally distributed database service. Azure SQL DB is a fully managed database-as-a-service built on SQL.

General purpose storage accounts have two tiers: Standard and Premium.

* Standard, HDD, lowest cost per GB, use for apps that require bulk storage and infrequently accessed
* Premium, SSD, consistet low-letency performance, use for apps where I/O is intensive, i.e database

NOTE: you cannot convert storage account from standard to premium, -> make new

Explore Azure storage services

Azure Storage includes these data services, each of which is accessed through a storage account:

* Azure Containers (Blobs): A massively scalable object store for text and binary data, img/docs to browser, distributed access, mp4, jpg, bck/restore, disaster rec and arc.
  Accessible: over HTTP(S) with SDK and/or clis

* Azure Files: Managed file shares for cloud or on-premises deployments, network file shares, vms can read, write. 
  Accessible: SMB from anywhere in the world, URL and SAS token (they allow specific access to a private asset for a specific amount of time.)

* Azure Queues: A messaging store for reliable messaging between application components, 64 KB in size, messages to be processed asynchronously
  Accessible:
* Azure Tables: A NoSQL store for schemaless storage of structured data, now part of Azure Cosmos DB, 
  API offering that provides throughput-optimized tables, global distribution, and automatic secondary indexes, storing structured, non-relational data.
  Accessible:

Determine storage account kinds

* Standard general-purpose v2        Most scenarios including Blob, File, Queue, Table, and Data Lake Storage.
* Premium block blobs                Block blob scenarios with high transactions rates, or scenarios that use smaller objects or require consistently low storage latency.
* Premium file shares                Enterprise or high-performance file share applications.
* Premium page blobs                 Premium high-performance page blob scenarios.


Determine replication strategies

The data in your Azure storage account is always replicated to ensure durability and high availability. 

Comparison of replication options

                                                LRS             ZRS         GRS/RA-GRS        GZRS/RA-GZRS
* Node unavailability within a data center      yes             yes         yes               yes
* An entire data center (zonal or non-zonal)    no              yes         yes               yes 
 becomes unavailable
* A region-wide outage                          no              no          yes               yes
* Read access to your data 
  (in a remote, geo-replicated region) 
  in the event of region-wide unavailability    no              no          yes(with RA-GRS   yes(with RA-GRS)
* Available in storage account types            GPv1, v2, Blob  GPv2        Gpv1, v2 Blob     GPv2



Locally redundant storage (3 copies)
* synchronously replicates data to three disks within a data center in the primary region
* LRS is the lowest-cost replication option and offers the least durability compared to other options
* If a datacenter-level disaster (for example, fire or flooding) occurs, all replicas may be lost or unrecoverable.

* Despite its limitations, LRS may be appropriate in these scenarios:
** data that can be easily reconstructed if data loss occurs
** data is constantly changing, for example a live feed, and storing the data is really not required
** application is restricted to replicating data only within a country due to data governance requirements

Zone redundant storage (3 x 3 copies)
* synchronously replicates data amongst three Azure availability zones in the primary region
* Synchronously replicates your data across three (3) storage clusters in a single region.
* Each storage cluster is physically separated from the others and resides in its own availability zone.
* Be able access and manage your data if a zone becomes unavailable
* Excellent performance and low latency

Here are a few of more things to know about ZRS:
* Not yet available in all regions
* Changing to ZRS from another data replication option requires the physical data movement from a single storage stamp to multiple stamps within a region.
* ZRS may not protect your data against a regional disaster where multiple zones are permanently affected
* Instead, ZRS offers resiliency for your data.

Geo-redundant storage (3 x 3 (x 2))
* stores another three copies of data in a paired Azure region
* Geo-redundant storage (GRS) replicates your data to a secondary region (hundreds of miles away from the primary location of the source data).
* GRS replicates your data to another data center in a secondary region, 
  but that data is available to be read only if Microsoft initiates a failover from the primary to secondary region.
* Read-access geo-redundant storage (RA-GRS) is based on GRS. RA-GRS replicates your data to another data center 
  in a secondary region, and also provides you with the option to read from the secondary region. 
  With RA-GRS, you can read from the secondary regardless of whether Microsoft initiates a failover from the primary to the secondary.

Geo-zone redundant storage 
* Geo-zone-redundant storage (GZRS) combines the high availability of zone-redundant storage with protection from regional outages as provided by geo-redundant storage
* Data in a GZRS storage account is replicated across three Azure availability zones in the primary region and also replicated to a secondary geographic 
  region for protection from regional disasters. Each Azure region is paired with another region within the same geography, together making a regional pair.


Access storage
* Object that you store in Azure Storage has a unique URL address
* If your storage account is named mystorageaccount, then the default endpoints for your storage account are:

Container service: //mystorageaccount.blob.core.windows.net
Table service: //mystorageaccount.table.core.windows.net
Queue service: //mystorageaccount.queue.core.windows.net
File service: //mystorageaccount.file.core.windows.net

Configure a custom domain
* You can configure a custom domain for accessing blob data in your Azure storage account.
* Direct CNAME mapping and an intermediary domain.
* To enable a custom domain for the 
   blobs.contoso.com sub domain to an Azure storage account, 
   create a CNAME record that points from 
   blobs.contoso.com to the Azure storage account 
   [storage account].blob.core.windows.net. 
   The following example maps a domain to an Azure storage account in DNS:

CNAME record                                Target
blobs.contoso.com                           contosoblobs.blob.core.windows.net


* Intermediary mapping with asverify Mapping a domain that is already in use within Azure may result in minor downtime as the domain is updated. 
  To avoid downtime, you can use the asverify subdomain to validate the domain. By prepending asverify to your own subdomain, 
  you permit Azure to recognize your custom domain without modifying the DNS record for the domain. 
  After you modify the DNS record for the domain, it will be mapped to the blob endpoint with no downtime.
* The following examples maps a domain to the Azure storage account in DNS with the asverify intermediary domain:

CNAME record                                 Target
asverify.blobs.contoso.com                   asverify.contosoblobs.blob.core.windows.net      
blobs.contoso.com                            contosoblobs.blob.core.windows.net


Secure storage endpoints
* For accessing a storage account, you would use the Firewalls and virtual networks blade to add the virtual networks that will have access. 
* Firewalls and Virtual Networks restricts access to the Storage Account from specific Subnets on Virtual Networks or public IPs.
* Subnets and Virtual Networks must exist in the same Azure Region or Region Pair as the Storage Account.


Configure blob storage
Stores unstructured data in the cloud as objects/blobs
* The storage account
* Containers in the storage account
* Blobs in a container

Create blob containers
1. A container provides a grouping of a set of blobs. 
1.1 All blobs must be in a container. 
2. An account can contain an unlimited number of containers. 
2.1 A container can store an unlimited number of blobs.

* The name may only contain lowercase letters, numbers, and hyphens, and must begin with a letter or a number. (> 3, < 63)
* Default container is private
** Use Private to ensure there is no anonymous access to the container and blobs.
** Use Blob to allow anonymous public read access for blobs only.
** Use Container to allow anonymous public read and list access to the entire container, including the blobs.

Note:
PowerShell using the New-AzStorageContainer 

Create blob access tiers
* Hot, frequent access, default.
* Cool, large amount, infrequently and minimum 30 d, cost effective, but access higher.
* Archive, tolarate x amount of h latency and at least for 180 days. most cost effective, but access most expensive.

Add blob lifecycle management rules
* Policy for GPV2 ad Blob, policy transitions for access tiers or expire
* Transition blobs to a cooler storage tier (hot to cool, hot to archive, or cool to archive) to optimize for performance and cost.
* Delete blobs at the end of their lifecycles, Define rules to be run once per day at the storage account level.
* Apply rules to containers or a subset of blobs.

Determine blob object replication
* Object replication asynchronously copies block blobs in a container according to rules that you configure. 
  The contents of the blob, any versions associated with the blob, 
  and the blob's metadata and properties are all copied from the source container to the destination container.

Region1                       Region2
Sr account                    Dest Account
Sr Container1 - - - - - - - > De Container1->
Blob1.txt   (asynchronously)  Blob1.txt

                              Region3
                              Dest Account
Sr Container2 - - - - - - - > Sr Container2
Blob2.txt                     Blob2.txt
Blob3.txt                     Blob3.txt

Upload blobs (3 types)
* Block blobs (default) consist of blocks of data assembled to make a blob, text, binary, files, img, video
* Append blobs are like block blobs in that they are made up of blocks, but they are optimized for append operations, so they are useful for logging scenarios.
* Page blobs can be up to 8 TB in size and are more efficient for frequent read/write operations. Azure virtual machines use page blobs as OS and data disks.
* Tools, AzCopy cmd tool, .Net lib ASDM, Azure Data Factory (account key, SAS signature, service principal or managed identity), Azure Storage Explorer, etc

Determine storage pricing

* Performance tiers: The storage tier determines the amount of data stored and the cost of storing the data. As the performance tier gets cooler, the per-gigabyte cost decreases.
* Data access costs: Data access charges increase as the tier gets cooler. For data in the cool and archive storage tier, you are charged a per-gigabyte data access charge for reads.
* Transaction costs: There is a per-transaction charge for all tiers. The charge increases as the tier gets cooler.
* Geo-Replication data transfer costs: This charge only applies to accounts with geo-replication configured, including GRS and RA-GRS. Geo-replication data transfer incurs a per-gigabyte charge.
* Outbound data transfer costs: Outbound data transfers (data that is transferred out of an Azure region) incur billing for bandwidth usage on a per-gigabyte basis. This billing is consistent with general-purpose storage accounts.
* Changing the storage tier: Changing the account storage tier from cool to hot incurs a charge equal to reading all the data existing in the storage account. However, changing the account storage tier from hot to cool incurs a charge equal to writing all the data into the cool tier (GPv2 accounts only).

Configure storage security
* Azure Storage provides a comprehensive set of security capabilities that together enable developers to build secure applications.
* Encryption, all writen is encrypted
* Authentication, AD, RBAC
* Transit, HTTPS, SMB 3.0
* Disk encryption, OS and data disks can be en crypted ADE.
* SAS, delegate access grant

Authorization options
* Azure AD, RBACK, Shared key (account access key), Shared access signature (access spesific time), Anonymous (A public container or blob is accessible to any user for anonymous read access)

Create shared access signatures
* A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. 
  You can provide a SAS to clients who shouldn't have access to your storage account key. 
  By distributing a SAS URI to these clients, you grant them access to a resource for a specified period of time. 
  SAS is a secure way to share your storage resources without compromising your account keys.

Identify URI and SAS parameters
* SAS = URI (parameters + token)                                                                                                  
https://myaccount.blob.core.windows.net/?restype=service&comp=properties&sv=2015-04-05&ss=bf&srt=s&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https &sig=F%6GRVAZ5Cdj2Pw4txxxxx
* Resource URI
* Storage services version = sv
* Service = ss=bf
* Resource type = srt=s
* Start time= st=
* Expiery time = se
* Resource = sr=b 
* Permission = sp=rw
* IP Range = sip=
* Protocol = spr=https
* Signature = sig=F%6GRVXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Determine storage service encryption
* Azure Storage Service Encryption (SSE) for data at rest protects your data by ensuring your organizational security and compliance commitments are met.
* 256-bit AES encryption, one of the strongest block ciphers available.
* SSE is enabled for all new and existing storage accounts and cannot be disabled. Because your data is secured by default, you don't need to modify your code or applications.
* * Encryption type
* * * MS managed keys
* * * Customer manage key
* Create customer managed keys
* The Azure Key Vault can manage your encryption keys. 
  You can create your own encryption keys and store them in a key vault, or you can use Azure Key Vault's APIs to generate encryption keys.
* Customer-managed keys give you more flexibility and control. You can create, disable, audit, rotate, and define access controls.


Apply storage security best practices
* Risks (When you use shared access signatures in your applications, you should be aware of two potential risks.)
* * SAS is compromised, it can be used by anyone who obtains it.
* * SAS provided to a client application expires and the application is unable to retrieve a new SAS from your service, then no new connections

Recommendations
* HTTPS
* Reference stored access policies where possible (Revoke permissions without having to regenerate the storage account keys, 
  Set the storage account key expiration date far out in the future. )
* Use near-term expiration times on an unplanned SAS (Short time)
* Have clients automatically renew the SAS if necessary 

https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/samples/file_samples_authentication.py#L59

def authentication_shared_access_signature(self):
        # Instantiate a ShareServiceClient using a connection string
        # [START generate_sas_token]
        from azure.storage.fileshare import ShareServiceClient
        share_service_client = ShareServiceClient.from_connection_string(self.connection_string)

        # Create a SAS token to use to authenticate a new client
        from azure.storage.fileshare import generate_account_sas, ResourceTypes, AccountSasPermissions

        sas_token = generate_account_sas(
            self.account_name,
            self.access_key,
            resource_types=ResourceTypes(service=True),
            permission=AccountSasPermissions(read=True),
            expiry=datetime.utcnow() + timedelta(hours=1)
        )

* Be careful with SAS start time (least 15 minutes in the past. Or, don't set it at all, which will make it valid immediately in all cases. )
* Be specific with the resource to be accessed ( minimum required privileges.)
* Understand that your account will be billed for any usage, including that done with SAS
  write access 200 gb blob, read access download it 100 times, incurring 2TB egress
* Validate data written using SAS (hould perform this validation after the data is written and before it is used by your application)
* Don't assume SAS is always the correct choice
  Risk: create a middle-tier service that writes to your storage account after performing business rule validation, authentication, and auditing.
* Use Storage Analytics to monitor your application (logging and metrics to observe any spike in authentication failures)

Configure Azure files and Azure File Sync

Files and blobs comparison

Feature                 Description                                When to use
Azure Files             SMB, SDK, REST                             You want to "lift and shift" an application to the cloud that already uses the native file system APIs to
                                                                   share data between it and other applications running in Azure. You want to store development and debugging
                                                                   tools that need to be accessed from many virtual machines.

Azure Blobs             SDK, REST                                  You want your application to support streaming and random-access scenarios. You want to be able to
                        interface that allows unstructured data    access application data from anywhere.
                        to be stored and accessed at a massive
                        scale in block blobs.

Azure files are true directory objects. Azure blobs are a flat namespace.
Azure files are accessed through file shares. Azure blobs are accessed through a container.


AZ-104: Deploy and manage Azure compute resources
TODO 6 hr 19 min

AZ-104: Configure and manage virtual networks for Azure administrators
TODO 8 hr

AZ-104: Monitor and back up Azure resources
4 hr 50 min 


