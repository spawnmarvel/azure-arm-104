https://docs.microsoft.com/nb-no/learn/paths/az-104-administrator-prerequisites/

AZ-104: Prerequisites for Azure administrators
TODO 3h
Configure Azure resources with tools
Use Azure Resource Manager
Explore the Azure Resource Manager template parameters

In the parameters section of the template, you specify which values you can input when deploying the resources. The available properties for a parameter are:
"parameters": 
    { "<parameter-name>" :
        { "type" : "<type-of-parameter-value>",
         "defaultValue": "<default-value-of-parameter>",
          "allowedValues": [ "<array-of-allowed-values>" ], 
           "minValue": <minimum-value-for-int>,
           "maxValue": <maximum-value-for-int>,
            "minLength": <minimum-length-for-string-or-array>, 
            "maxLength": <maximum-length-for-string-or-array-parameters>,
             "metadata": { "description": "<description-of-the parameter>" } } }


Windows
Azure Az PowerShell module
Linux
On Linux, the package manager will change based on the Linux distribution you choose.
LINUX
Distribution(s)	Package manager
Ubuntu, Debian	apt-get
Red Hat, CentOS	yum
OpenSUSE	zypper
Fedora	dnf
Mac
On macOS, you will use Homebrew to install PowerShell.

Powershell cmdlets
* to get help on the Get-ChildItem cmdlet, enter the following statement in a Windows PowerShell session:
Get-Help -Name Get-ChildItem -Detailed
* You can get a list of loaded modules using the Get-Module command:
Get-Module

$PSVersionTable.PSVersion
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
# Take a coffee, this takes time, answer Yx2 and wait, when done, close/open Powershell and verify module
# Minimum Powershell v is 5.1
Get-InstalledModule -Name Az

* Update a PowerShell module
Update-Module -Name Az

Connect AzAccount
* or
Connect AzAccount -TenantId The-tenant-id-we-copied-from-azure-ad

* iF Created multiple Azure subscriptions. You can configure Azure PowerShell to execute commands against a particular subscription.
Set-AzContext -Subscription '00000000-0000-0000-0000-000000000000'

* Get a list of all resource groups
Get-AzResourceGroup | Format-Table

* Create a resource group
New-AzResourceGroup -Name <name> -Location <location>

$rg = “testit2-rg”
Get-AzResource -ResourceGroupName $rg

* Create an Azure Virtual Machine
New-AzVm
       -ResourceGroupName <resource group name>
       -Name <machine name>
       -Credential <credentials object>
       -Location <location>
       -Image <image name>

* The AzVM suffix is specific to VM-based commands in PowerShell. There are several others you can use:
Command	Description
Remove-AzVM	      Deletes an Azure VM.
Start-AzVM	      Start a stopped VM.
Stop-AzVM	      Stop a running VM.
Restart-AzVM	  Restart a VM.
Update-AzVM	      Updates the configuration for a VM.

* The interesting thing is that now your VM is an object you can interact with
$ResourceGroupName = "ExerciseResources"
$vm = Get-AzVM  -Name MyVM -ResourceGroupName $ResourceGroupName
$vm.HardwareProfile.vmSize = "Standard_DS3_v2"

Update-AzVM -ResourceGroupName $ResourceGroupName  -VM $vm


Exercise - Create an Azure Resource using scripts in Azure PowerShell

Connect-AzAccount

* Create a Linux VM with Azure PowerShell
* Add the -OpenPorts parameter, and pass "22" as the port. This will let us SSH into the machine.

New-AzVm -ResourceGroupName learn-9a7c6d9b-5436-4341-9ac2-61a67345466e -Name "testvm-eus-01" -Credential (Get-Credential) -Location "East US" -Image UbuntuLTS -OpenPorts 22
Dhamapada, Dhamapada-eat-carrot-ls45

$vm = (Get-AzVM -Name "testvm-eus-01" -ResourceGroupName learn-9a7c6d9b-5436-4341-9ac2-61a67345466e)

* Query the value to dump out the information about the VM.
$vm
$vm.HardwareProfile
$vm.StorageProfile.OsDisk
$vm | Get-AzPublicIpAddress

ssh Dhamapada@111.11.11.1
exit

* Delete a VM
Stop-AzVM -Name $vm.Name -ResourceGroup $vm.ResourceGroupName
Get-AzResource -ResourceGroupName $vm.ResourceGroupName | Format-Table
Remove-AzVM -Name $vm.Name -ResourceGroup $vm.ResourceGroupName -Force -As-Job
Get-AzResource -ResourceGroupName $vm.ResourceGroupName | Format-Table

* Delete the network interface.
$vm | Remove-AzNetworkInterface –Force

Delete the managed OS disks and storage account.
Get-AzDisk -ResourceGroupName $vm.ResourceGroupName -DiskName $vm.StorageProfile.OSDisk.Name | Remove-AzDisk -Force

* Next, delete the virtual network.
Get-AzVirtualNetwork -ResourceGroup $vm.ResourceGroupName | Remove-AzVirtualNetwork -Force

* Delete the network security group.
Get-AzNetworkSecurityGroup -ResourceGroup $vm.ResourceGroupName | Remove-AzNetworkSecurityGroup -Force

* And finally, delete the public IP address.
Get-AzPublicIpAddress -ResourceGroup $vm.ResourceGroupName | Remove-AzPublicIpAddress -Force


Exercise - Create and save scripts in Azure PowerShell

cd $HOME\clouddrive
touch "./ConferenceDailyReset.ps1"
code "./ConferenceDailyReset.ps1" # Integrated editor azure portal
* Start by capturing the input parameter in a variable. Add the following line to your script.
param([string]$resourceGroup)
* Prompt for a username and password for the VM's admin account and capture the result in a variable.

param([string]$resourceGroup)
$adminCredential = Get-Credential -Message "Enter a username and password for the VM administrator."
For ($i = 1; $i -le 3; $i++) 
{
    $vmName = "ConferenceDemo" + $i
    Write-Host "Creating VM: " $vmName
    New-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Credential $adminCredential -Image UbuntuLTS
}

Get-AzResource -ResourceType Microsoft.Compute/virtualMachines

Clean up
* The sandbox automatically cleans up your resources when you're finished with this module.
Remove-AzResourceGroup -Name MyResourceGroupName

Control Azure services with the CLI

As part of the testing, you want to compare app performance for different data sources, 
and for different types of data connections. You've noticed that when your development team uses the Azure portal to create a new test instance of the app, 
they don't always use exactly the same parameters. 
You plan to solve this problem by using a set of standard deployment commands for each app test, which can be automated if required, 
and which will work in the same way across all the computers used by your software team.

Azure CLI
variable="value"
variable=integer

PowerShell
$variable="value"
$variable=integer

az --version

$ az find
the following arguments are required: <CLI_TERM>

TRY THIS:
az find "az storage"
Give me any Azure CLI group and I’ll show the most popular commands within the group.

az find "az monitor activity-log list"
Give me any Azure CLI command and I’ll show the most popular parameters and subcommands.

az find "arm template"
You can also enter a search term, and I'll try to help find the best commands.

https://aka.ms/cli_ref
Read more about the command in reference docs

* Connect
az login
* Create
az group create --name <name> --location <location>
* Verify
az group list
az group list --output table

Exercise - Create an Azure website using the CLI
* let's use the Azure CLI to create a resource group, and then to deploy a web app into this resource group.

* create several variables that you will use in later commands
export RESOURCE_GROUP=learn-92e86fb8-eec3-486f-9306-f729f468c5ad
export AZURE_REGION=centralus
export AZURE_APP_PLAN=popupappplan-$RANDOM
export AZURE_WEB_APP=popupwebapp-$RANDOM

az group list --output table

* If you have several items in the group list, you can filter the return values by adding a --query option. Try the following command:
az group list --query "[?name == '$RESOURCE_GROUP']"

* Steps to create a service plan
* Create an App Service plan to run your app. The following command specifies the free pricing tier, but you can run az appservice plan create --help to see the other pricing tiers.
az appservice plan create --name $AZURE_APP_PLAN --resource-group $RESOURCE_GROUP --location $AZURE_REGION --sku FREE

* Verify that the service plan was created successfully by listing all your plans in a table.
az appservice plan list --output table

* Steps to create a web app
az webapp create --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --plan $AZURE_APP_PLAN

* Verify that the app was created successfully by listing all your apps in a table.
az webapp list --output table

Name               Location    State    ResourceGroup                               DefaultHostName    AppServicePlan
-----------------  ----------  -------  ------------------------------------------  -----------------------------------  ------------------
popupwebapp-15123  Central US  Running  learn-92e86fb8-eec3-486f-9306-f729f468c5ad  popupwebapp-15123.azurewebsites.net  popupappplan-12763

* then my website URL would be: http://popupwebapp-15123.azurewebsites.net
* or curl curl $AZURE_WEB_APP.azurewebsites.net

Steps to deploy code from GitHub
* Let's use a simple PHP page available in the Azure Samples GitHub repository that displays "Hello World!" when it executes. Make sure to use the web app name you created.
az webapp deployment source config --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --repo-url "https://github.com/Azure-Samples/php-docs-hello-world" --branch master --manual-integration

* Result
{
  "branch": "master",
  "deploymentRollbackEnabled": false,
  "id": "/subscriptions/538be7b9-15c9-4be0-a2ee-8d948e33ad6a/resourceGroups/learn-92e86fb8-eec3-486f-9306-f729f468c5ad/providers/Microsoft.Web/sites/popupwebapp-15123/sourcecontrols/web",
  "isGitHubAction": false,
  "isManualIntegration": true,
  "isMercurial": false,
  "kind": null,
  "location": "Central US",
  "name": "popupwebapp-15123",
  "repoUrl": "https://github.com/Azure-Samples/php-docs-hello-world",
  "resourceGroup": "learn-92e86fb8-eec3-486f-9306-f729f468c5ad",
  "systemData": null,
  "type": "Microsoft.Web/sites/sourcecontrols"
}

http://popupwebapp-15123.azurewebsites.net/

* Now gives Hello World

*Remove the rg

RG_GROUP="learn-92e86fb8-eec3-486f-9306-f729f468c5ad"
echo "Name of rg; $RG_GROUP"

RG_EXISTS= az group exists --name $RG_GROUP
echo "Does rg exist; $RG_EXISTS"

RG_RESULT= az group delete --name $RG_GROUP --no-wait --yes -y #--subscription
echo $RG_RESULT

az group list --output table
Name                                        Location    Status
------------------------------------------  ----------  --------
learn-92e86fb8-eec3-486f-9306-f729f468c5ad  westus      Deleting

Deploy Azure infrastructure by using JSON ARM templates

Practice of infrastructure as code by using ARM templates. 
You can also integrate your ARM templates into continuous integration and continuous deployment (CI/CD) tools like Azure Pipelines, which can automate your release pipelines for fast and reliable application and infrastructure updates. By using Azure DevOps and ARM template tasks, you can continuously build and deploy your projects.

ARM template file structure

Element	Description
schema	        A required section that defines the location of the JSON schema file that describes the structure of JSON data. The version number you use depends on the scope of the deployment and your JSON editor.
contentVersion	A required section that defines the version of your template (such as 1.0.0.0). You can use this value to document significant changes in your template to ensure you're deploying the right template.
apiProfile	    An optional section that defines a collection of API versions for resource types. You can use this value to avoid having to specify API versions for each resource in the template.
parameters	    An optional section where you define values that are provided during deployment. These values can be provided by a parameter file, by command-line parameters, or in the Azure portal.
variables	    An optional section where you define values that are used to simplify template language expressions.
functions	    An optional section where you can define user-defined functions that are available within the template. User-defined functions can simplify your template when complicated expressions are used repeatedly in your template.
resources	    A required section that defines the actual items you want to deploy or update in a resource group or a subscription.
output	        An optional section where you specify the values that will be returned at the end of the deployment.

Deploy a local template.
Deploy a linked template.
Deploy in a continuous deployment pipeline.


Exercise - Create and deploy an Azure Resource Manager template

1 file called azuredeploy.json.
2 The Visual Studio Code ARM template extension comes configured with snippets to help you develop templates
3 The VS Code automatically displays several potential choices that start with arm!.

Your file now looks like this:

JSON

Copy
{
"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {},
"functions": [],
"variables": {},
"resources": [],
"outputs": {}
}

4 Connect-AzAccount
5 Get-AzSubscription
* Run the following command, replacing {Your subscription ID} with the one you copied in the previous step to change your active subscription to the Concierge Subscription.
6 $context = Get-AzSubscription -SubscriptionId {Your subscription ID}
  Set-AzContext $context

7 Deploy the template to Azure by running the following commands. The ARM template doesn't have any resources yet, so you won't see resources created.
$templateFile = "./azuredeploy.json"
$ran = Get-Random -Maximum 100
$deployName = "buildTest" + $ran + $ran
Write-Host "Running deploy: " $deployName
$deploymentName=$deployName
$rg = 'learn-af1fd9f8-de1d-4048-a20a-48904672560b'
New-AzResourceGroupDeployment -Name $deploymentName `
  -ResourceGroupName $rg `
  -TemplateFile $templateFile `


* When you've deployed your ARM template to Azure, go to the Azure portal and make sure you're in the sandbox subscription. To do that, select your avatar in the upper-right corner of the page. Select Switch directory. In the list, choose the Microsoft Learn Sandbox directory.

* In the azuredeploy.json file in Visual Studio Code, place your cursor inside the braces in the parameters attribute. "parameters":{},

* Select Enter, and then enter par. You see a list of related snippets. Choose arm-param. It adds a generic parameter to the template. It will look like this:

 "parameters": {
    "parameter1": {
    "type": "string",
    "metadata": {
        "description": "description"
    }
  }
},
* Change the parameter to be called storageName, and leave the type as a string. Add a minLength value of 3 and a maxLength value of 24. Add a description value of The name of the Azure storage resource.
"parameters": {
        "storageName": {
            "type": "string",
            "minLength":3,
            "maxLength":24,
            "metadata": {
                "description": "description"
            }
        }
    },

* Use the new parameter in the resources block in both the name and displayName values. The entire file will look like this:
"resources": [{
        "name": "[parameters('storageName')]",
 "tags": {
            "displayName": "[parameters('storageName')]"
        },

Add another parameter to limit allowed values
* Place your cursor after the closing brace for the storageNameparameter. Add a comma, and select Enter.
* Again, enter par, and select arm-param.
* ARM templates support // and /* */ comments.


Allow this deployment to finish. This deployment succeeds as expected


Run the following commands to deploy the template with a parameter that isn't allowed. Here, you changed the storageSKU parameter to Basic.

$templateFile = "./azuredeploy.json"
$ran = Get-Random -Maximum 100
$deployName = "buildTest" + $ran + $ran
Write-Host "Running deploy: " $deployName
$deploymentName=$deployName
$rg = 'learn-af1fd9f8-de1d-4048-a20a-48904672560b'
New-AzResourceGroupDeployment -Name $deploymentName `
  -ResourceGroupName $rg `
  -TemplateFile $templateFile `
  -storageName "espenklei12" `
  -storageSKU "Standard_LRS" -Verbose

This deployment fails. Notice the error.

Add output to the ARM template

"outputs": {
        "storageEndpoint": {
            "type": "object",
            "value": "[reference(parameters('storageName')).primaryEndpoints]"
        }
    }
    
And change
 -storageSKU "Basic" -Verbose
 -storageSKU "Standard_LRS" -Verbose


AZ-104: Manage identities and governance in Azure

Configure Azure Active Directory
* Single sign-on to any cloud or on-premises web app
* Works with iOS, macOS, Android, and Windows devices
* Protect on-premises web applications with secure remote access
* Easily extend Active Directory to the cloud
* Protect sensitive data and applications
* Reduce costs and enhance security with self-service capabilities

Describe Azure Active Directory concepts
* Identity, object that get autenticated
* Account, an identity that has data associated with it
* Azure AD Account, an identity created thorugh Azure AD or other MS cloud services, (work or school account)
* Azure Subscription, useds to pay for cloud services 
* Azure tenant/directory, a dedicated/trusted instance of Azure AD

Compare Active Directory Domain Services to Azure Active Directory
* AD DS is the traditional deployment of Windows Server-based Active Directory on a physical or virtual server.
* Although Azure AD has many similarities to AD DS, there are also many differences. 
* It is important to realize that using Azure AD is different from deploying an Active Directory domain controller on an Azure virtual machine and adding it to your on-premises domain. 
* Here are some characteristics of Azure AD that make it different.

** Identity solution. Azure AD is primarily an identity solution, and it is designed for Internet-based applications by using HTTP and HTTPS communications.
** REST API Querying. Because Azure AD is HTTP/HTTPS based, it cannot be queried through LDAP
** Communication Protocols. Because Azure AD is HTTP/HTTPS based, it does not use Kerberos authentication. 
*** Instead, it uses HTTP and HTTPS protocols such as SAML, WS-Federation, and OpenID Connect for authentication (and OAuth for authorization).
** Federation Services. Azure AD includes federation services, and many third-party services (such as Facebook).
** Flat structure. Azure AD users and groups are created in a flat structure, and there are no Organizational Units (OUs) or Group Policy Objects (GPOs).

Select Azure Active Directory editions
* Azure Active Directory comes in four editions—Free, Microsoft 365 Apps, Premium P1, and Premium P2
1 Azure Active Directory Free. Provides user and group management, on-premises directory synchronization, basic reports, 
  and single sign-on across Azure, Microsoft 365, and many popular SaaS apps.
2 Azure Active Directory Microsoft 365 Apps. This edition is included with O365. In addition to the Free features, this edition provides Identity & Access Management for Microsoft 365 apps including branding, 
  MFA, group access management, and self-service password reset for cloud users.
3 Azure Active Directory Premium P1. In addition to the Free features, P1 also lets your hybrid users access both on-premises and cloud resources. 
  Support for adv. administration, dynamic groups, self service management groups, identity manager (on-prem idenetiy and access management suite), cloud-
  write-back, self service password reset
4 Azure Active Directory Premium P2. In addition to the Free and P1 features, P2 also offers Azure Active Directory Identity Protection to help provide risk-based Conditional Access to your apps and critical company data. 

Implement Azure Active Directory join
* Azure Active Directory (Azure AD) enables single sign-on to devices, apps, and services from anywhere. 
  IT administrators must ensure corporate assets are protected and that devices meet standards for security and compliance.

** Single-Sign-On (SSO) to your Azure-managed SaaS apps and services. 
** Enterprise compliant roaming of user settings across joined devices. 
** Access to Microsoft Store for Business using an Azure AD account
** Windows Hello support for secure and convenient access to work resources.
** Restriction of access to apps from only devices that meet compliance policy
** Seamless access to on-premise resources when the device has line of sight to the on-premises domain controller.

Connection options
* Registering a device to Azure AD enables you to manage a device’s identity,can use the identity to enable or disable a device.
* Joining a device is an extension to registering a device. Joining provides the benefits of registering and changes the local state of a device. 

NOTE: Registration combined with a mobile device management (MDM) solution such as Microsoft Intune, provides additional device attributes in Azure AD. You can create conditional access rules that enforce access from devices to meet your standards for security and compliance.

Implement self-service password reset
* Enabling Self-service Password Reset (SSPR) gives the users the ability to bypass the helpdesk and reset their own passwords.
* To configure Self-Service Password Reset, you first determine who will be enabled to use self-service password reset. 
  From your existing Azure AD tenant, on the Azure portal under Azure Active Directory (Users) select Password reset.
  In the Password reset properties there are three options: None, Selected, and All.
* The Selected option is useful for creating specific groups who have self-service password reset enabled. 
  You can create group for testing or proof of concept before deploying to a larger group.

Authentication methods
* At least one authentication method is required to reset a password. It is a good idea to have other methods available.
* email notification, a text, or code sent to user’s mobile or office phone, or a set of security questions.
* can also configure how many correctly answered security questions are required for a successful password reset

Configure user and group accounts

Create user accounts
Azure Active Directory-> Users

Typically, Azure AD defines users in three ways:
* Cloud identities. These users exist only in Azure AD
* Directory-synchronized identities. These users exist in an on-premises Active Directory. 
  A synchronization activity that occurs via Azure AD Connect brings these users in to Azure. Their source is Windows Server AD.
* Guest users. These users exist outside Azure. Examples are accounts from other cloud providers and Microsoft accounts such as an Xbox LIVE account. Their source is Invited user.

Manage user accounts
* New or guest 

Create bulk user accounts
* Azure Active Directory (Azure AD) supports bulk user create and delete operations and supports downloading lists of users. Just fill out the comma-separated values (CSV) template. 
  You can download the template from the Azure AD portal. To create users in the Azure portal, you must be signed in as a Global administrator or User administrator.
* Users | All users-> Bulk operations

Things to consider when using the template
* Naming conventions, First.last@domain.com
* Methods commonly used include generating a random password and emailing it to the new user or their manager.

Create group accounts

Azure AD allows you to define two different types of groups.
*  Security groups. Security groups are used to manage member and computer access to shared resources for a group of users.
* Microsoft 365 groups. Microsoft 365 groups provide collaboration opportunities by giving members access to a shared mailbox, calendar, files, SharePoint site, and more. 
  You can give people outside of your organization access to the group. Both users and admins can use Microsoft 365 groups.

Adding members to groups
* Assigned. Lets you add specific users to be members of this group and to have unique permissions.
* Dynamic User. Lets you use dynamic membership rules to automatically add and remove members. 
  When a member's attributes change, Azure reviews the dynamic group rules for the directory. 
  If the member meets the rule requirements, they're added. If the member no longer meets the rules requirements, they're removed.
* Dynamic Device (Security groups only). Lets you use dynamic group rules to automatically add and remove devices. If a device's attributes change (same as above (add, rm))

Create administrative units
* It can be useful to restrict administrative scope by using administrative units in organizations that are made up of independent divisions of any kind.

Configure subscriptions









AZ-104: Implement and manage storage in Azure
TODO 4 hr 44 min

AZ-104: Deploy and manage Azure compute resources
TODO 6 hr 19 min

AZ-104: Configure and manage virtual networks for Azure administrators
TODO 8 hr

AZ-104: Monitor and back up Azure resources
4 hr 50 min




